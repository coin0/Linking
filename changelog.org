#+TITLE: Link project changelog file
#+AUTHOR: coin0
#+EMAIL: coin_st@hotmail.com

* Planned content
  
** DONE import golang stun/turn service code
   Legacy code for RFC5766 and RFC5389
** DONE finish STM32F1 example for 74hc595 segments display
   Simple segment digit display to show working status for stm32 and its loads
** DONE finish STM32F1 ref code for esp8266 station mode
   WIFI module to connect AP so stm32 could get connected with public internet
** TODO finish STM32F1 ref code for OV7725 or OV7060
   VGA/QVGA bitmap sampling module to get data for video/picutre process
** TODO STUN client sdk
*** DONE Golang version <2020-06-30 二 10:19>
    Should complete most of func and would be the prototype for C version sdk
    <2020-07-01 三 10:53> binding request
    <2020-07-01 三 18:43> alloc request
    <2020-07-02 四 10:24> refresh request
    <2020-07-02 四 13:17> create-perm request
    <2020-07-02 四 16:41> send indication
    <2020-07-06 一 13:54> data indication
    <2020-07-06 一 16:42> channel-bind request
    <2020-07-07 二 11:54> channel-data
    <2020-07-07 二 15:32> TCP connection
*** TODO C version
    Make sure this version will keep the same interfaces with Golang version

* Issue track list

** DONE template for a typical issue report                              :p3:
*** WHAT
    Summary of what this ticket is
*** WHEN
    <2020-06-30 二 09:30> insert date by c-u c-c .
*** WHO
    coin0
*** WHY
    Root cause or result of investigation
*** HOW
    Solution or further action to be taken
   
** TODO dev/ref/esp8266:USART3 DMA transmit does not work                :p1:
*** WHAT
    It seems serial transmition between esp01 and stm32 by DMA mode does not really work
*** WHEN
    <2020-06-29 一 21:10>
*** WHO
    coin0
*** WHY
    It is possible that esp01 bootup time is too short, AT command was not sent successfully
*** HOW
    Add 2000ms sleep time after AT+RST sent to esp01
    <2020-07-01 三 10:54> To be verified
** DONE link/stun:client:alloc always returns error and relay is not saved :p1:
*** WHAT
    always failed when tried to request allocation
*** WHEN
    <2020-07-02 四 10:20>
*** WHO
    coin0
*** WHY
    should not check error code existence, obviously there is no error code on success
*** HOW
    Refactor code logic

** DONE link/stun:server:refresh lifetime=0, request not succeed         :p2:
*** WHAT
    refresh request lifetime=0 will return error code (alloc mismatch)
    should comply with https://tools.ietf.org/html/rfc5766#section-7.2 page 31
*** WHEN
    <2020-07-02 四 10:23>
*** WHO
    coin0
*** WHY
    design defect
    <2020-07-02 四 10:43> not a server bug, client sdk isue
*** HOW
    <2020-07-02 四 10:23> investigating
** TODO link/stun:server:the key of channel map should be proto:ip:port combination instead of simple ip address :p2:
*** WHAT
    according to definition in https://tools.ietf.org/html/rfc5766#section-11
    channels are bound to different transport address instead of ip address
*** WHEN
    <2020-07-06 一 15:39>
*** WHO
    coin0
*** WHY
    Review the code in rfc5766, channels are saved by the key made from simple ip address, this is incorrect
*** HOW
    Key to channel map should be composed with proto:ip:port
** DONE link/stun:server:crash in decodeTCP, slice out of range when handling roudup for channel data :p1:
*** WHAT
    panic: runtime error: slice bounds out of range

    goroutine 34 [running]:
    stun.decodeTCP(0xc8200e3ef4, 0x9, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
      /opt2/work/Linking/link/stun/src/stun/common.go:214 +0x334
    stun.ListenTCP.func1(0xc8200dc008)
      /opt2/work/Linking/link/stun/src/stun/common.go:125 +0x5c2
    created by stun.ListenTCP
      /opt2/work/Linking/link/stun/src/stun/common.go:139 +0x4d1

*** WHEN
    <2020-07-07 二 14:50>
*** WHO
    coin0
*** WHY
    invalid client will probably send non-rouded up channel data which will make server panic
*** HOW
    check buffer size and drop this invalid channel data
    <2020-07-07 二 15:06> verified

** TODO link/stun:server:investigate if channel data would be rounded up when sending to peer over TCP connection :p2:
*** WHAT
    Peer with TCP connection will drop lots of channel data messages
*** WHEN
    legacy issues
*** WHO
    coin0
*** WHY
    1 UDP peer and 1 TCP peer, if UDP peer sends unpadded channel data to TCP peer, it is possible that this message will be dropped due to requirement of https://tools.ietf.org/html/rfc5766#section-11.5
*** HOW
** DONE link/stun:client:use one single listener to receive UDP/TCP packets :p1:
** DONE link/stun:client will receive incorrect length of send indication data attributes :p1:
*** WHAT
    ========== client > server(udp://127.0.0.1:3478) ==========
    method=send indication, length=20 bytes
    transactionID=0x59 0xa2 0x66 0x8f 0xe6 0x8c 0x4d 0x0b 0x9b 0x90 0x70 0x52
    attributes:
    type=0x0012(XOR-PEER-ADDRESS), len=8, value=0x00 0x01 0xe1 0x13 0x5e 0x12 0xa4 0x43 (127.0.0.1:49153)
    type=0x0013(DATA), len=3, value=0x62 0x62 0x62 0x00  <<<<< should be 3

    ========== server(udp://127.0.0.1:3478) > client ==========
    method=data indication, length=20 bytes
    transactionID=0x16 0x23 0xbd 0x24 0x70 0x2a 0xd5 0xed 0x00 0x00 0x00 0x00
    attributes:
    type=0x0012(XOR-PEER-ADDRESS), len=8, value=0x00 0x01 0xe1 0x13 0x5e 0x12 0xa4 0x43 (127.0.0.1:49153)
    type=0x0013(DATA), len=4, value=0x62 0x62 0x62 0x00  <<<<< Wrong len
*** WHEN
    <2020-07-21 二 18:20>
*** WHO
    coin0
*** WHY
    In doSendIndication() -> getAttrData(), it returned the whole byte slice of the attribute value
*** HOW
    It should have only returned the value limited by attribute length
    <2020-07-22 三 08:06> verified
    ========== client > server(udp://127.0.0.1:3478) ==========
    method=send indication, length=20 bytes
    transactionID=0x07 0x3d 0x21 0x16 0x92 0xaa 0xed 0xdb 0x3f 0x20 0x41 0xc0
    attributes:
    type=0x0012(XOR-PEER-ADDRESS), len=8, value=0x00 0x01 0xe1 0x12 0x5e 0x12 0xa4 0x43 (127.0.0.1:49152)
    type=0x0013(DATA), len=3, value=0x61 0x61 0x61 0x00


    ========== server(udp://127.0.0.1:3478) > client ==========
    method=data indication, length=20 bytes
    transactionID=0x16 0x23 0xea 0x2f 0x1a 0xf0 0x1c 0x57 0x00 0x00 0x00 0x00
    attributes:
    type=0x0012(XOR-PEER-ADDRESS), len=8, value=0x00 0x01 0xe1 0x12 0x5e 0x12 0xa4 0x43 (127.0.0.1:49152)
    type=0x0013(DATA), len=3, value=0x61 0x61 0x61 0x00
